{"name": "test_lead_advisor_login[lead_advisor]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=131.0.6778.86)\nStacktrace:\n\tGetHandleVerifier [0x00D033E3+25059]\n\t(No symbol) [0x00C8CDE4]\n\t(No symbol) [0x00B6BEC3]\n\t(No symbol) [0x00B4D93B]\n\t(No symbol) [0x00BD800F]\n\t(No symbol) [0x00BEAE49]\n\t(No symbol) [0x00BD1C96]\n\t(No symbol) [0x00BA3FAC]\n\t(No symbol) [0x00BA4F3D]\n\tGetHandleVerifier [0x00FF5543+3113795]\n\tGetHandleVerifier [0x0100A20A+3198986]\n\tGetHandleVerifier [0x010029E2+3168226]\n\tGetHandleVerifier [0x00DA3250+680016]\n\t(No symbol) [0x00C9572D]\n\t(No symbol) [0x00C929D8]\n\t(No symbol) [0x00C92B75]\n\t(No symbol) [0x00C857D0]\n\tBaseThreadInitThunk [0x757D7BA9+25]\n\tRtlInitializeExceptionChain [0x7784C0CB+107]\n\tRtlClearBits [0x7784C04F+191]", "trace": "self = <login.test_login.TestLogIn object at 0x0000015D04920DF0>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"934da1944b103f2fb64cf667b3c51c93\")>\nrequest = <SubRequest 'setup_login' for <Function test_lead_advisor_login[lead_advisor]>>\n\n    @pytest.fixture\n    def setup_login(self, setup, request):\n        role = request.param  # Access the role passed in parameterized tests\n        s_email = self.credentials_manager.get_email(role)\n        s_password = self.credentials_manager.get_password(role)\n        if not s_email or not s_password:\n            pytest.fail(f\"Missing credentials for role: {role}\")\n    \n        driver = setup\n        lp = Login(driver)\n>       driver.get(self.baseURL)\n\nlogin\\test_login.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:389: in get\n    self.execute(Command.GET, {\"url\": url})\n..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000015D04926940>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...dInitThunk [0x757D7BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7784C0CB+107]\\\\n\\\\tRtlClearBits [0x7784C04F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=131.0.6778.86)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00D033E3+25059]\nE       \t(No symbol) [0x00C8CDE4]\nE       \t(No symbol) [0x00B6BEC3]\nE       \t(No symbol) [0x00B4D93B]\nE       \t(No symbol) [0x00BD800F]\nE       \t(No symbol) [0x00BEAE49]\nE       \t(No symbol) [0x00BD1C96]\nE       \t(No symbol) [0x00BA3FAC]\nE       \t(No symbol) [0x00BA4F3D]\nE       \tGetHandleVerifier [0x00FF5543+3113795]\nE       \tGetHandleVerifier [0x0100A20A+3198986]\nE       \tGetHandleVerifier [0x010029E2+3168226]\nE       \tGetHandleVerifier [0x00DA3250+680016]\nE       \t(No symbol) [0x00C9572D]\nE       \t(No symbol) [0x00C929D8]\nE       \t(No symbol) [0x00C92B75]\nE       \t(No symbol) [0x00C857D0]\nE       \tBaseThreadInitThunk [0x757D7BA9+25]\nE       \tRtlInitializeExceptionChain [0x7784C0CB+107]\nE       \tRtlClearBits [0x7784C04F+191]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "parameters": [{"name": "setup_login", "value": "'lead_advisor'"}], "start": 1732445556418, "stop": 1732445556418, "uuid": "0934e75a-410f-4c6a-baf5-44bc98e08003", "historyId": "ef57e98bb2110cff3077c5e93a82ee92", "testCaseId": "0655ea4c9ecfba2e919e9abcd598912d", "fullName": "login.test_login.TestLogIn#test_lead_advisor_login", "labels": [{"name": "parentSuite", "value": "login"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "TestLogIn"}, {"name": "host", "value": "Ramandeep"}, {"name": "thread", "value": "20888-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "login.test_login"}]}