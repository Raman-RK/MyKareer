{"name": "test_hr_employer_login[hr_employer]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <login.test_login.TestLogIn object at 0x0000015D04919520>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"934da1944b103f2fb64cf667b3c51c93\")>\nrequest = <SubRequest 'setup_login' for <Function test_hr_employer_login[hr_employer]>>\n\n    @pytest.fixture\n    def setup_login(self, setup, request):\n        role = request.param  # Access the role passed in parameterized tests\n        s_email = self.credentials_manager.get_email(role)\n        s_password = self.credentials_manager.get_password(role)\n        if not s_email or not s_password:\n            pytest.fail(f\"Missing credentials for role: {role}\")\n    \n        driver = setup\n        lp = Login(driver)\n        driver.get(self.baseURL)\n        driver.maximize_window()\n        lp.click_login_lp()\n        lp.send_email(s_email)\n        lp.send_password(s_password)\n        lp.click_login()\n        lp.close_success_toast(driver)\n        print(driver.current_url)\n        # Verify successful login\n>       WebDriverWait(driver, 10).until(\n            EC.url_contains(\"dashboard\")\n        )\n\nlogin\\test_login.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"934da1944b103f2fb64cf667b3c51c93\")>\nmethod = <function url_contains.<locals>._predicate at 0x0000015D04996AF0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException"}, "attachments": [{"name": "stdout", "source": "14e28e85-c3e9-4c49-ad1d-243c88f830f0-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "setup_login", "value": "'hr_employer'"}], "start": 1732445475535, "stop": 1732445475535, "uuid": "e7dada05-bf6b-481a-9a5c-7613789a8070", "historyId": "8856cfdef7f706eac372553c6a5bdd13", "testCaseId": "8bc67bb5bb20d85ae91b9e580569f616", "fullName": "login.test_login.TestLogIn#test_hr_employer_login", "labels": [{"name": "parentSuite", "value": "login"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "TestLogIn"}, {"name": "host", "value": "Ramandeep"}, {"name": "thread", "value": "20888-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "login.test_login"}]}